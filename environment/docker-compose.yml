version: '3.8'
## MYSQL config
services:

  nginx:
    image: nginx:latest
    container_name: nginx_server
    ports:
      - "80:80" # Map port 80 trên host đến port 80 trong container
      - "443:443" # Map port 443 nếu cần HTTPS
      - "1122:1122"
    networks:
      - minikube
  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - minikube

  ## REDIS config
  redis:
    image: redis:latest
    container_name: redis-container
    restart: always
    ports:
      - "6379:6379"
    networks:
      - minikube

  mysql:
    image: mysql:8.0.33
    container_name: mysql-microservice
    ports:
      - "3306:3306"
    restart: always
    volumes:
      - ./data/db_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d/
    command: [
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci',
      '--skip-character-set-client-handshake'  # Buộc tất cả kết nối sử dụng utf8mb4
    ]
    networks:
      - minikube
    environment:
      MYSQL_USER: hainh
      MYSQL_PASSWORD: Admin123
      MYSQL_ROOT_PASSWORD: Admin123
      MYSQL_DATABASE: testdata



  zookeeper:
    image: quay.io/debezium/zookeeper:2.7
    container_name: demo_zookeeper
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - minikube

  kafka:
    image: quay.io/debezium/kafka:2.7
    container_name: demo_kafka
    ports:
      - "9092:9092"
    links:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.1.103:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    networks:
      - minikube

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: demo_kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: demo_kafka:9092
    ports:
      - "9089:8080"
    links:
      - kafka
    networks:
      - minikube

  connect:
    image: quay.io/debezium/connect:2.7
    container_name: demo_connect
    ports:
      - "8083:8083"
    links:
      - kafka
      - mysql
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
    networks:
      - minikube

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.103:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - minikube



#  ## discovery-service config
#  discovery-service:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    image: nhh0507/discovery-service:v1.0.0
#    container_name: discovery-service
#    ports:
#      - "8761:8761"
#    networks:
#      - minikube
#
### gateway-service config
#  gateway-service:
#    image: nhh0507/gateway-service:v1.0.0
#    container_name: gateway-service
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - eureka_client_service-url_defaultZone=http://discovery-service:8761/eureka
#    ports:
#      - "9004:9004"
#    networks:
#      backend:
#    depends_on:
#      - discovery-service
#
### identity-service config
#  identity-service:
#    image: nhh0507/identity-service:v1.0.0
#    container_name: identity-service
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - eureka_client_service-url_defaultZone=http://discovery-service:8761/eureka
#      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-microservice:3306/testdata
#    ports:
#      - "9006:9006"
#    networks:
#      backend:
#    depends_on:
#      - discovery-service
#      - gateway-service
#      - mysql-microservice
#
### identity-service config
#  inventory-service:
#    image: nhh0507/inventory-service:v1.0.0
#    container_name: inventory-service
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - eureka_client_service-url_defaultZone=http://discovery-service:8761/eureka
#      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-microservice:3306/testdata
#    ports:
#      - "9003:9003"
#    networks:
#      backend:
#    depends_on:
#      - discovery-service
#      - gateway-service
#      - mysql-microservice
#
### product-service config
#  product-service:
#    image: nhh0507/product-service:v1.0.0
#    container_name: product-service
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - eureka_client_service-url_defaultZone=http://discovery-service:8761/eureka
#      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-microservice:3306/testdata
#    ports:
#      - "9001:9001"
#    networks:
#      backend:
#    depends_on:
#      - discovery-service
#      - gateway-service
#      - mysql-microservice
#
### order-service config
#  order-service:
#    image: nhh0507/order-service:v1.0.0
#    container_name: order-service
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - eureka_client_service-url_defaultZone=http://discovery-service:8761/eureka
#      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-microservice:3306/testdata
#    ports:
#      - "9002:9002"
#    networks:
#      backend:
#    depends_on:
#      - discovery-service
#      - gateway-service
#      - mysql-microservice

## create network
networks:
  minikube:
    name: minikube
    external: true
